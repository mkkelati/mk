#!/bin/bash
clear
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
PURPLE='\033[1;35m'
CYAN='\033[1;36m'
WHITE='\033[1;37m'
CORTITLE='\033[1;41m'
SCOLOR='\033[0m'
banner='
 ___ _    _____      _____  _  _ ___ 
/ __| |  / _ \ \    / /   \| \| / __|
\__ \ |_| (_) \ \/\/ /| |) | .  \__ \
|___/____\___/ \_/\_/ |___/|_|\_|___/'

echo -e "${CORTITLE}◇───────────────────────────────────────────────◇${SCOLOR}" 
echo -e "${CORTITLE}🐉ㅤDRAGON VPS MANAGER SLOW DNS MANAGERㅤ🐉${SCOLOR}"
echo -e "${CORTITLE}◇───────────────────────────────────────────────◇${SCOLOR}" 
echo -e "${RED}$banner${SCOLOR}"

# Function to check if running as root
check_root() {
    if [ "$(id -u)" != "0" ]; then
        echo -e "\n${RED}ERROR: THIS SCRIPT NEEDS TO BE RUN AS ROOT!${SCOLOR}"
        echo -e "${YELLOW}Use 'sudo -i' before running the script.${SCOLOR}\n"
        exit 1
    fi
}

# Function to check if required packages are installed
check_dependencies() {
    echo -e "\n${YELLOW}Checking dependencies...${SCOLOR}"
    
    local dependencies=("dnsutils" "screen" "curl" "iptables" "bind9")
    local missing_deps=()
    
    for dep in "${dependencies[@]}"; do
        if ! dpkg -s "$dep" &> /dev/null; then
            missing_deps+=("$dep")
        fi
    done
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo -e "${YELLOW}Installing missing dependencies: ${missing_deps[*]}${SCOLOR}"
        apt-get update -y > /dev/null 2>&1
        apt-get install -y "${missing_deps[@]}" > /dev/null 2>&1
        
        # Check if installation was successful
        for dep in "${missing_deps[@]}"; do
            if ! dpkg -s "$dep" &> /dev/null; then
                echo -e "${RED}Failed to install $dep. Please install it manually.${SCOLOR}"
                exit 1
            fi
        done
        echo -e "${GREEN}All dependencies installed successfully.${SCOLOR}"
    else
        echo -e "${GREEN}All dependencies are already installed.${SCOLOR}"
    fi
}

# Function to download and install SlowDNS binaries
install_slowdns() {
    echo -e "\n${YELLOW}Installing SlowDNS binaries...${SCOLOR}"
    
    # Create directory for SlowDNS if it doesn't exist
    mkdir -p /etc/slowdns
    
    # Download the SlowDNS binary
    if [ ! -e "/etc/slowdns/dns" ]; then
        curl -s -o /etc/slowdns/dns https://github.com/januda-ui/DRAGON-VPS-MANAGER/raw/main/Modulos/dns > /dev/null 2>&1
        chmod +x /etc/slowdns/dns
        
        if [ ! -e "/etc/slowdns/dns" ]; then
            echo -e "${RED}Failed to download SlowDNS binary. Please check your internet connection.${SCOLOR}"
            exit 1
        fi
        echo -e "${GREEN}SlowDNS binary downloaded successfully.${SCOLOR}"
    else
        echo -e "${GREEN}SlowDNS binary already exists.${SCOLOR}"
    fi
}

# Function to generate keys for SlowDNS
generate_keys() {
    echo -e "\n${YELLOW}Generating SlowDNS keys...${SCOLOR}"
    
    cd /etc/slowdns
    if [ ! -e "/etc/slowdns/server.key" ] || [ ! -e "/etc/slowdns/server.pub" ]; then
        rm -f /etc/slowdns/server.key /etc/slowdns/server.pub 2>/dev/null
        
        # Generate new keys
        openssl genrsa -out server.key 2048 > /dev/null 2>&1
        openssl rsa -in server.key -pubout -out server.pub > /dev/null 2>&1
        
        if [ ! -e "/etc/slowdns/server.key" ] || [ ! -e "/etc/slowdns/server.pub" ]; then
            echo -e "${RED}Failed to generate keys. Please check if OpenSSL is installed.${SCOLOR}"
            exit 1
        fi
        echo -e "${GREEN}Keys generated successfully.${SCOLOR}"
    else
        echo -e "${GREEN}Keys already exist.${SCOLOR}"
    fi
    
    # Display the public key
    echo -e "\n${YELLOW}Your SlowDNS Public Key:${SCOLOR}"
    cat /etc/slowdns/server.pub
}

# Function to configure SlowDNS
configure_slowdns() {
    echo -e "\n${YELLOW}Configuring SlowDNS...${SCOLOR}"
    
    # Get the server's public IP
    PUBLIC_IP=$(curl -s ifconfig.me)
    
    # Ask for NS domain
    echo -e "\n${CYAN}Enter your NS domain (e.g., ns.yourdomain.com):${SCOLOR}"
    read -p "NS Domain: " NS_DOMAIN
    
    if [ -z "$NS_DOMAIN" ]; then
        echo -e "${RED}NS domain cannot be empty.${SCOLOR}"
        exit 1
    fi
    
    # Save configuration
    echo "$NS_DOMAIN" > /etc/slowdns/ns_domain
    echo "$PUBLIC_IP" > /etc/slowdns/public_ip
    cat /etc/slowdns/server.pub > /etc/slowdns/server_pub.txt
    
    echo -e "${GREEN}SlowDNS configuration saved.${SCOLOR}"
}

# Function to create SlowDNS service
create_service() {
    echo -e "\n${YELLOW}Creating SlowDNS service...${SCOLOR}"
    
    cat > /etc/systemd/system/slowdns.service << EOF
[Unit]
Description=SlowDNS Service
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/etc/slowdns
ExecStart=/etc/slowdns/dns -udp :53 -privkey /etc/slowdns/server.key $(cat /etc/slowdns/ns_domain) 127.0.0.1:22
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOF

    # Reload systemd and enable the service
    systemctl daemon-reload
    systemctl enable slowdns.service
    
    echo -e "${GREEN}SlowDNS service created successfully.${SCOLOR}"
}

# Function to start SlowDNS service
start_slowdns() {
    echo -e "\n${YELLOW}Starting SlowDNS service...${SCOLOR}"
    
    systemctl start slowdns.service
    
    # Check if service is running
    if systemctl is-active --quiet slowdns.service; then
        echo -e "${GREEN}SlowDNS service started successfully.${SCOLOR}"
    else
        echo -e "${RED}Failed to start SlowDNS service. Check logs with 'journalctl -u slowdns.service'.${SCOLOR}"
    fi
}

# Function to display SlowDNS information
show_info() {
    echo -e "\n${CORTITLE}◇───────────────────────────────────────────────◇${SCOLOR}" 
    echo -e "${YELLOW}SlowDNS Information:${SCOLOR}"
    echo -e "${CYAN}NS Domain:${SCOLOR} $(cat /etc/slowdns/ns_domain)"
    echo -e "${CYAN}Public IP:${SCOLOR} $(cat /etc/slowdns/public_ip)"
    echo -e "${CYAN}Public Key:${SCOLOR} $(cat /etc/slowdns/server_pub.txt)"
    echo -e "${CYAN}Service Status:${SCOLOR} $(systemctl is-active slowdns.service)"
    echo -e "${CORTITLE}◇───────────────────────────────────────────────◇${SCOLOR}" 
    
    echo -e "\n${YELLOW}Instructions for Client:${SCOLOR}"
    echo -e "${WHITE}1. Configure your DNS to point to your NS domain.${SCOLOR}"
    echo -e "${WHITE}2. Use the public key for client configuration.${SCOLOR}"
    echo -e "${WHITE}3. Connect using SlowDNS client with your NS domain and public key.${SCOLOR}"
}

# Main menu function
main_menu() {
    clear
    echo -e "${CORTITLE}◇───────────────────────────────────────────────◇${SCOLOR}" 
    echo -e "${CORTITLE}🐉ㅤDRAGON VPS MANAGER SLOW DNS MANAGERㅤ🐉${SCOLOR}"
    echo -e "${CORTITLE}◇───────────────────────────────────────────────◇${SCOLOR}" 
    echo -e "${RED}$banner${SCOLOR}"
    
    echo -e "\n${CYAN}Select an option:${SCOLOR}"
    echo -e "${WHITE}1.${SCOLOR} ${YELLOW}Install SlowDNS${SCOLOR}"
    echo -e "${WHITE}2.${SCOLOR} ${YELLOW}Start SlowDNS Service${SCOLOR}"
    echo -e "${WHITE}3.${SCOLOR} ${YELLOW}Stop SlowDNS Service${SCOLOR}"
    echo -e "${WHITE}4.${SCOLOR} ${YELLOW}Restart SlowDNS Service${SCOLOR}"
    echo -e "${WHITE}5.${SCOLOR} ${YELLOW}Show SlowDNS Information${SCOLOR}"
    echo -e "${WHITE}6.${SCOLOR} ${YELLOW}Generate New Keys${SCOLOR}"
    echo -e "${WHITE}0.${SCOLOR} ${YELLOW}Exit${SCOLOR}"
    
    echo -e "\n${CYAN}Enter your choice:${SCOLOR}"
    read -p "Option: " option
    
    case $option in
        1)
            check_root
            check_dependencies
            install_slowdns
            generate_keys
            configure_slowdns
            create_service
            start_slowdns
            show_info
            ;;
        2)
            systemctl start slowdns.service
            echo -e "\n${GREEN}SlowDNS service started.${SCOLOR}"
            ;;
        3)
            systemctl stop slowdns.service
            echo -e "\n${YELLOW}SlowDNS service stopped.${SCOLOR}"
            ;;
        4)
            systemctl restart slowdns.service
            echo -e "\n${GREEN}SlowDNS service restarted.${SCOLOR}"
            ;;
        5)
            show_info
            ;;
        6)
            generate_keys
            echo -e "\n${GREEN}New keys generated. You may need to update client configurations.${SCOLOR}"
            ;;
        0)
            echo -e "\n${YELLOW}Exiting...${SCOLOR}"
            exit 0
            ;;
        *)
            echo -e "\n${RED}Invalid option. Please try again.${SCOLOR}"
            ;;
    esac
    
    echo -e "\n${CYAN}Press Enter to return to the main menu...${SCOLOR}"
    read
    main_menu
}

# Start the main menu
main_menu 